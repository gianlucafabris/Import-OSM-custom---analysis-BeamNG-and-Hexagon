#Then, a test for equality of variances is performed. This test can be used even if the two variables are not normal as the sample size is sufficiently large.
#test between raw and custom
var.test(raw$position_p, custom$position_p, conf.level = 0.99, alternative = c("two.sided"))
#test between custom and custom_elevation
var.test(custom$position_p, custom_elevation$position_p, conf.level = 0.99, alternative = c("two.sided"))
#From the output it can be deduced for position_p given raw and custom
#- from the test of equality of variances, with 99% confidence the two variances can be considered different and also the extremely low p-value (1.03e-6) reinforces the decision to decisively reject the hypothesis that the variances are equal
#also for position_p given custom and custom_elevation
#- from the test of equality of variances, with 99% confidence the two variances can be considered different and also the extremely low p-value (less than 2.2e-16) reinforces the decision to decisively reject the hypothesis that the variances are equal
#Therefore it is possible to carry out a test on the equality of the means by imposing the condition that the variance of the populations is unknown and different in the two populations.
#test between raw and custom
t.test(raw$position_p, custom$position_p, conf.level = 0.99, alternative = c("two.sided"), mu=0, var.equal = F)
#test between custom and custom_elevation
t.test(custom$position_p, custom_elevation$position_p, conf.level = 0.99, alternative = c("two.sided"), mu=0, var.equal = F)
#From the output it can be deduced for position_p given raw and custom
#- from the test of equality of means, with 99% confidence the two means can be considered different and also the high p-value (0.98) reinforces the decision to decisively reject the hypothesis that the means are equal
#also for position_p given custom and custom_elevation
#- from the test of equality of means, with 99% confidence the two means can be considered different and also the extremely low p-value (less than 2.2e-16) reinforces the decision to decisively reject the hypothesis that the means are equal
#so the custom road generator doesn't influence the average pitch, but the elevation influences the average pitch, the road generator influences the variance pitch.
#We proceed with the analysis of how road generator influences the z acceleration
#We study how acceleration_z varies with dataset
summary(raw$acceleration_z)
sd(raw$acceleration_z)
skewness(raw$acceleration_z)
kurtosis(raw$acceleration_z)
summary(custom$acceleration_z)
sd(custom$acceleration_z)
skewness(custom$acceleration_z)
kurtosis(custom$acceleration_z)
summary(custom_elevation$acceleration_z)
sd(custom_elevation$acceleration_z)
skewness(custom_elevation$acceleration_z)
kurtosis(custom_elevation$acceleration_z)
par(mfrow=c(1,3))
boxplot(raw$acceleration_z, main="Raw", horizontal=F)
boxplot(custom$acceleration_z, main="Custom", horizontal=F)
boxplot(custom_elevation$acceleration_z, main="Custom elevation", horizontal=F)
par(mfrow=c(1,1))
#From the output it can be deduced for acceleration_z given raw, custom and custom_elevation
#- from the summary there is very left asymmetry (median less than mean)
#- from boxplot, it confirms what said above because both the median is in the middle part of the box of 1st and 3rd quartile and the two minimum and maximum lines have different lengths (maximum longer than minimum) and there are outliers
#Then, a test is carried out on the difference in the means of two independent populations.
#First it is checked whether the two variables have a normal distribution through the qqplots.
par(mfrow=c(1,3))
qqnorm(raw$acceleration_z, main="Raw")
qqline(raw$acceleration_z)
qqnorm(custom$acceleration_z, main="Custom")
qqline(custom$acceleration_z)
qqnorm(custom_elevation$acceleration_z, main="Custom elevation")
qqline(custom_elevation$acceleration_z)
par(mfrow=c(1,1))
#From the output it can be deduced for acceleration_z given raw, custom and custom_elevation
#- from the qqplot, it can be seen that the distribution in not normal due to the tails (both) which do not follow the straight line and also the main part of the distribution doesn't follow the straight line
#Then, a test for equality of variances is performed. This test can be used even if the two variables are not normal as the sample size is sufficiently large.
#test between raw and custom
var.test(raw$acceleration_z, custom$acceleration_z, conf.level = 0.99, alternative = c("two.sided"))
#test between custom and custom_elevation
var.test(custom$acceleration_z, custom_elevation$acceleration_z, conf.level = 0.99, alternative = c("two.sided"))
#From the output it can be deduced for acceleration_z given raw and custom
#- from the test of equality of variances, with 99% confidence the two variances can be considered different and also the extremely low p-value (less than 2.2e-16) reinforces the decision to decisively reject the hypothesis that the variances are equal
#also for acceleration_z given custom and custom_elevation
#- from the test of equality of variances, with 99% confidence the two variances can be considered different and also the extremely low p-value (less than 2.2e-16) reinforces the decision to decisively reject the hypothesis that the variances are equal
#Therefore it is possible to carry out a test on the equality of the means by imposing the condition that the variance of the populations is unknown and different in the two populations.
#test between raw and custom
t.test(raw$acceleration_z, custom$acceleration_z, conf.level = 0.99, alternative = c("two.sided"), mu=0, var.equal = F)
#test between custom and custom_elevation
t.test(custom$acceleration_z, custom_elevation$acceleration_z, conf.level = 0.99, alternative = c("two.sided"), mu=0, var.equal = F)
#From the output it can be deduced for acceleration_z given raw and custom
#- from the test of equality of means, with 99% confidence the two means can be considered equal and also the low p-value (2.33e-4) reinforces the decision to decisively reject the hypothesis that the means are equal
#also for acceleration_z given custom and custom_elevation
#- from the test of equality of means, with 99% confidence the two means can be considered equal and also the extremely low p-value (less than 2.2e-16) reinforces the decision to decisively reject the hypothesis that the means are equal
#so the road generator influences the average z acceleration (also the variance).
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
library(dplyr)
library(moments)
library(reticulate)
library(ggplot2)
library(grid)
library(gridExtra)
raw = read.csv("data/importosm_raw.csv", header = TRUE, sep = ",")
raw2 = read.csv("data/importosm_raw2.csv", header = TRUE, sep = ",")
raw3 = read.csv("data/importosm_raw3.csv", header = TRUE, sep = ",")
custom = read.csv("data/importosm_custom.csv", header = TRUE, sep = ",")
custom2 = read.csv("data/importosm_custom2.csv", header = TRUE, sep = ",")
custom3 = read.csv("data/importosm_custom3.csv", header = TRUE, sep = ",")
custom_elevation = read.csv("data/importosm_custom_elevation.csv", header = TRUE, sep = ",")
custom_elevation2 = read.csv("data/importosm_custom_elevation2.csv", header = TRUE, sep = ",")
custom_elevation3 = read.csv("data/importosm_custom_elevation3.csv", header = TRUE, sep = ",")
# rename columns, merge data and align data
names(raw) = c("time", "frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_x", "position_y", "position_z", "position_h", "position_p", "position_r", "position_flags", "position_type", "position_system", "speed_x", "speed_y", "speed_z", "speed_h", "speed_p", "speed_r", "speed_flags", "speed_type", "speed_system", "acceleration_x", "acceleration_y", "acceleration_z", "acceleration_h", "acceleration_p", "acceleration_r", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null")
names(raw2) = c("time", "frame", "id", "lightmask", "steering", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null")
names(raw3) = c("time", "frame", "id", "road_id", "lane_id", "flags", "road_s", "road_t", "lane_offset", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null")
names(custom) = c("time", "frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_x", "position_y", "position_z", "position_h", "position_p", "position_r", "position_flags", "position_type", "position_system", "speed_x", "speed_y", "speed_z", "speed_h", "speed_p", "speed_r", "speed_flags", "speed_type", "speed_system", "acceleration_x", "acceleration_y", "acceleration_z", "acceleration_h", "acceleration_p", "acceleration_r", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null")
names(custom2) = c("time", "frame", "id", "lightmask", "steering", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null")
names(custom3) = c("time", "frame", "id", "road_id", "lane_id", "flags", "road_s", "road_t", "lane_offset", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null")
names(custom_elevation) = c("time", "frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_x", "position_y", "position_z", "position_h", "position_p", "position_r", "position_flags", "position_type", "position_system", "speed_x", "speed_y", "speed_z", "speed_h", "speed_p", "speed_r", "speed_flags", "speed_type", "speed_system", "acceleration_x", "acceleration_y", "acceleration_z", "acceleration_h", "acceleration_p", "acceleration_r", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null")
names(custom_elevation2) = c("time", "frame", "id", "lightmask", "steering", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null")
names(custom_elevation3) = c("time", "frame", "id", "road_id", "lane_id", "flags", "road_s", "road_t", "lane_offset", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null")
raw = raw[, !(names(raw) %in% c("frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_flags", "position_type", "position_system", "speed_flags", "speed_type", "speed_system", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null"))]
raw2 = raw2[, !(names(raw2) %in% c("frame", "id", "lightmask", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null"))]
raw3 = raw3[, !(names(raw3) %in% c("frame", "id", "lane_id", "flags", "road_s", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null"))]
custom = custom[, !(names(custom) %in% c("frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_flags", "position_type", "position_system", "speed_flags", "speed_type", "speed_system", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null"))]
custom2 = custom2[, !(names(custom2) %in% c("frame", "id", "lightmask", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null"))]
custom3 = custom3[, !(names(custom3) %in% c("frame", "id", "lane_id", "flags", "road_s", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null"))]
custom_elevation = custom_elevation[, !(names(custom_elevation) %in% c("frame", "id", "category", "type", "vismask", "name", "geometry_dim_x", "geometry_dim_y", "geometry_dim_z", "geometry_offset_x", "geometry_offset_y", "geometry_offset_z", "position_flags", "position_type", "position_system", "speed_flags", "speed_type", "speed_system", "acceleration_flags", "acceleration_type", "acceleration_system", "distance - m", "null"))]
custom_elevation2 = custom_elevation2[, !(names(custom_elevation2) %in% c("frame", "id", "lightmask", "steering_wheeltorque", "acc_mask", "acc_speed", "battery_state", "battery_rate", "displaylightmask", "fuelgauge", "null"))]
custom_elevation3 = custom_elevation3[, !(names(custom_elevation3) %in% c("frame", "id", "lane_id", "flags", "road_s", "rel_h", "rel_p", "rel_r", "road_type", "path_s", "null"))]
raw = merge(merge(raw, raw2, by = "time", all = FALSE), raw3, by = "time", all = FALSE)
rm(raw2)
rm(raw3)
custom = merge(merge(custom, custom2, by = "time", all = FALSE), custom3, by = "time", all = FALSE)
rm(custom2)
rm(custom3)
custom_elevation = merge(merge(custom_elevation, custom_elevation2, by = "time", all = FALSE), custom_elevation3, by = "time", all = FALSE)
rm(custom_elevation2)
rm(custom_elevation3)
# adding missing data and data normalization
raw = raw %>% mutate(
dist_planar = cumsum(c(0, sapply(2:nrow(raw), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2)
}))),
dist_spatial = cumsum(c(0, sapply(2:nrow(raw), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2 + (position_z[i] - position_z[i-1])^2)
})))
)
custom = custom %>% mutate(
dist_planar = cumsum(c(0, sapply(2:nrow(custom), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2)
}))),
dist_spatial = cumsum(c(0, sapply(2:nrow(custom), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2 + (position_z[i] - position_z[i-1])^2)
})))
)
custom_elevation = custom_elevation %>% mutate(
dist_planar = cumsum(c(0, sapply(2:nrow(custom_elevation), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2)
}))),
dist_spatial = cumsum(c(0, sapply(2:nrow(custom_elevation), function(i){
sqrt((position_x[i] - position_x[i-1])^2 + (position_y[i] - position_y[i-1])^2 + (position_z[i] - position_z[i-1])^2)
})))
)
raw$dist_planar = raw$dist_planar - min(unlist(raw$dist_planar))
raw$dist_spatial = raw$dist_spatial - min(unlist(raw$dist_spatial))
custom$dist_planar = custom$dist_planar - min(unlist(custom$dist_planar))
custom$dist_spatial = custom$dist_spatial - min(unlist(custom$dist_spatial))
custom_elevation$dist_planar = custom_elevation$dist_planar - min(unlist(custom_elevation$dist_planar))
custom_elevation$dist_spatial = custom_elevation$dist_spatial - min(unlist(custom_elevation$dist_spatial))
raw = raw %>% mutate(
speed_planar = sqrt((speed_x)^2 + (speed_y)^2),
speed_spatial = sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2)
)
custom = custom %>% mutate(
speed_planar = sqrt((speed_x)^2 + (speed_y)^2),
speed_spatial = sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2)
)
custom_elevation = custom_elevation %>% mutate(
speed_planar = sqrt((speed_x)^2 + (speed_y)^2),
speed_spatial = sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2)
)
raw = raw %>% mutate(
acceleration_planar = sqrt((acceleration_x)^2 + (acceleration_y)^2),
acceleration_spatial = sqrt((acceleration_x)^2 + (acceleration_y)^2 + (acceleration_z)^2)
)
custom = custom %>% mutate(
acceleration_planar = sqrt((acceleration_x)^2 + (acceleration_y)^2),
acceleration_spatial = sqrt((acceleration_x)^2 + (acceleration_y)^2 + (acceleration_z)^2)
)
custom_elevation = custom_elevation %>% mutate(
acceleration_planar = sqrt((acceleration_x)^2 + (acceleration_y)^2),
acceleration_spatial = sqrt((acceleration_x)^2 + (acceleration_y)^2 + (acceleration_z)^2)
)
raw = raw %>% mutate(
elevation_cum = c(NA, cumsum(abs(diff(position_z))))
)
custom = custom %>% mutate(
elevation_cum = c(NA, cumsum(abs(diff(position_z))))
)
custom_elevation = custom_elevation %>% mutate(
elevation_cum = c(NA, cumsum(abs(diff(position_z))))
)
raw = raw %>% filter(time >= 1)
raw = raw %>% filter(dist_planar < 800 | (dist_planar >= 800 & sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2) > 0.5))
custom = custom %>% filter(time >= 1)
custom = custom %>% filter(dist_planar < 800 | (dist_planar >= 800 & sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2) > 0.5))
custom_elevation = custom_elevation %>% filter(time >= 1)
custom_elevation = custom_elevation %>% filter(dist_planar < 800 | (dist_planar >= 800 & sqrt((speed_x)^2 + (speed_y)^2 + (speed_z)^2) > 0.5))
# position rad -> deg
raw = raw %>% mutate(
position_h_norm = (position_h * 180 / pi) %% 360 - 180,
position_p_norm = (position_p * 180 / pi + 180) %% 360 - 180,
position_r_norm = (position_r * 180 / pi + 180) %% 360 - 180
)
custom = custom %>% mutate(
position_h_norm = (position_h * 180 / pi) %% 360 - 180,
position_p_norm = (position_p * 180 / pi + 180) %% 360 - 180,
position_r_norm = (position_r * 180 / pi + 180) %% 360 - 180
)
custom_elevation = custom_elevation %>% mutate(
position_h_norm = (position_h * 180 / pi) %% 360 - 180,
position_p_norm = (position_p * 180 / pi + 180) %% 360 - 180,
position_r_norm = (position_r * 180 / pi + 180) %% 360 - 180
)
# speed m/s -> km/h
raw = raw %>% mutate(
speed_x_norm = speed_x * 3.6,
speed_y_norm = speed_y * 3.6,
speed_z_norm = speed_z * 3.6,
speed_planar_norm = speed_planar * 3.6,
speed_spatial_norm = speed_spatial * 3.6
)
custom = custom %>% mutate(
speed_x_norm = speed_x * 3.6,
speed_y_norm = speed_y * 3.6,
speed_z_norm = speed_z * 3.6,
speed_planar_norm = speed_planar * 3.6,
speed_spatial_norm = speed_spatial * 3.6
)
custom_elevation = custom_elevation %>% mutate(
speed_x_norm = speed_x * 3.6,
speed_y_norm = speed_y * 3.6,
speed_z_norm = speed_z * 3.6,
speed_planar_norm = speed_planar * 3.6,
speed_spatial_norm = speed_spatial * 3.6
)
# acceleration m/s^2 -> G
raw = raw %>% mutate(
acceleration_x_norm = acceleration_x / 9.81,
acceleration_y_norm = acceleration_y / 9.81,
acceleration_z_norm = acceleration_z / 9.81,
acceleration_planar_norm = acceleration_planar / 9.81,
acceleration_spatial_norm = acceleration_spatial / 9.81
)
custom = custom %>% mutate(
acceleration_x_norm = acceleration_x / 9.81,
acceleration_y_norm = acceleration_y / 9.81,
acceleration_z_norm = acceleration_z / 9.81,
acceleration_planar_norm = acceleration_planar / 9.81,
acceleration_spatial_norm = acceleration_spatial / 9.81
)
custom_elevation = custom_elevation %>% mutate(
acceleration_x_norm = acceleration_x / 9.81,
acceleration_y_norm = acceleration_y / 9.81,
acceleration_z_norm = acceleration_z / 9.81,
acceleration_planar_norm = acceleration_planar / 9.81,
acceleration_spatial_norm = acceleration_spatial / 9.81
)
#adding distance from reference line (exact) and importing road (for visualization) (approximated)
raw = raw %>% mutate(
dist_reference = road_t
)
custom = custom %>% mutate(
dist_reference = road_t
)
custom_elevation = custom_elevation %>% mutate(
dist_reference = road_t
)
raw = raw[, !(names(raw) %in% c("road_t", "lane_offset"))]
custom = custom[, !(names(custom) %in% c("road_t", "lane_offset"))]
custom_elevation = custom_elevation[, !(names(custom_elevation) %in% c("road_t", "lane_offset"))]
theta = atan2(diff(raw$position_y), diff(raw$position_x))
theta = c(theta, tail(theta, n=1))
road_raw <- data.frame(x = raw$position_x - raw$dist_reference * sin(theta), y = raw$position_y + raw$dist_reference * cos(theta))
theta = atan2(diff(custom$position_y), diff(custom$position_x))
theta = c(theta, tail(theta, n=1))
road_custom <- data.frame(x = custom$position_x - custom$dist_reference * sin(theta), y = custom$position_y + custom$dist_reference * cos(theta))
theta = atan2(diff(custom_elevation$position_y), diff(custom_elevation$position_x))
theta = c(theta, tail(theta, n=1))
road_custom_elevation <- data.frame(x = custom_elevation$position_x - custom_elevation$dist_reference * sin(theta), y = custom_elevation$position_y + custom_elevation$dist_reference * cos(theta))
rm(theta)
lane_width_raw = 3.5
lane_width_custom = 3.75
lane_width_custom_elevation = 3.75
if(!file.exists("output")){
dir.create("output")
}
plot_3var = function(data, title, variable1, variable1_scale, variable1_name, variable2, variable2_scale, variable2_name, variable3, variable3_scale, variable3_name){
p = data %>%
ggplot(aes(x = variable1, y = variable2, color = variable3)) +
scale_x_continuous(limits = c(variable1_scale[1], variable1_scale[2]), breaks = seq(variable1_scale[1], variable1_scale[2], variable1_scale[3])) +
scale_y_continuous(limits = c(variable2_scale[1], variable2_scale[2]), breaks = seq(variable2_scale[1], variable2_scale[2], variable2_scale[3])) +
coord_fixed(ratio = 1) +
scale_color_gradient(low = "#6B9EE1", high = "#86F5FA", limits = c(variable3_scale[1], variable3_scale[2]), breaks = seq(variable3_scale[1], variable3_scale[2], variable3_scale[3])) +
labs(title = title, x = variable1_name, y = variable2_name, colour = variable3_name) +
theme_minimal() +
theme(axis.text.x = element_text(color = "#000000"), axis.text.y = element_text(color = "#000000"), axis.line = element_line(color = "#000000"), panel.background = element_rect(fill = "#ffffff"), panel.grid.major.x = element_line(colour = "#ebebeb"), panel.grid.major.y = element_line(colour = "#ebebeb"), plot.title = element_text(size = rel(1.5)))
return(p)
}
plot_2var = function(data, title, variable1, variable1_scale, variable1_name, variable2, variable2_scale, variable2_name){
p = data %>%
ggplot(aes(x = variable1, y = variable2)) +
scale_x_continuous(limits = c(variable1_scale[1], variable1_scale[2]), breaks = seq(variable1_scale[1], variable1_scale[2], variable1_scale[3])) +
scale_y_continuous(limits = c(variable2_scale[1], variable2_scale[2]), breaks = seq(variable2_scale[1], variable2_scale[2], variable2_scale[3])) +
labs(title = title, x = variable1_name, y = variable2_name) +
theme_minimal() +
theme(axis.text.x = element_text(color = "#000000"), axis.text.y = element_text(color = "#000000"), axis.line = element_line(color = "#000000"), panel.background = element_rect(fill = "#ffffff"), panel.grid.major.x = element_line(colour = "#ebebeb"), panel.grid.major.y = element_line(colour = "#ebebeb"), plot.title = element_text(size = rel(1.5)))
return(p)
}
calc_scale = function(var){
return(c(floor(min(var)), floor(max(var))+1, (floor(max(var))+1 - floor(min(var)))/4))
}
ggsave("output/position z.png", grid.arrange(
plot_3var(
raw, "A) Raw - position x y and z",
raw$position_x-min(raw$position_x), c(0, floor(max(raw$position_x-min(raw$position_x)))+1, 100), "position x - m",
raw$position_y-min(raw$position_y), c(0, floor(max(raw$position_y-min(raw$position_y)))+1, 100), "position y - m",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom, "B) Custom - position x y and z",
custom$position_x-min(custom$position_x), c(0, floor(max(custom$position_x-min(custom$position_x)))+1, 100), "position x - m",
custom$position_y-min(custom$position_y), c(0, floor(max(custom$position_y-min(custom$position_y)))+1, 100), "position y - m",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom_elevation, "C) Custom elevation - position x y and z",
custom_elevation$position_x-min(custom_elevation$position_x), c(0, floor(max(custom_elevation$position_x-min(custom_elevation$position_x)))+1, 100), "position x - m",
custom_elevation$position_y-min(custom_elevation$position_y), c(0, floor(max(custom_elevation$position_y-min(custom_elevation$position_y)))+1, 100), "position y - m",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_2var(
raw, "D) Raw - z",
raw$time-min(raw$time), c(0, floor(max(raw$time-min(raw$time)))+1, 10), "time - s",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom, "E) Custom - z",
custom$time-min(custom$time), c(0, floor(max(custom$time-min(custom$time)))+1, 10), "time - s",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom_elevation, "F) Custom elevation - z",
custom_elevation$time-min(custom_elevation$time), c(0, floor(max(custom_elevation$time-min(custom_elevation$time)))+1, 10), "time - s",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
nrow = 2, ncol = 3), width = 10*3, height = 5*2)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
ggsave("output/position z.png", grid.arrange(
plot_3var(
raw, "A) Raw - position x y and z",
raw$position_x-min(raw$position_x), c(0, floor(max(raw$position_x-min(raw$position_x)))+1, 100), "position x - m",
raw$position_y-min(raw$position_y), c(0, floor(max(raw$position_y-min(raw$position_y)))+1, 100), "position y - m",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom, "B) Custom - position x y and z",
custom$position_x-min(custom$position_x), c(0, floor(max(custom$position_x-min(custom$position_x)))+1, 100), "position x - m",
custom$position_y-min(custom$position_y), c(0, floor(max(custom$position_y-min(custom$position_y)))+1, 100), "position y - m",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom_elevation, "C) Custom elevation - position x y and z",
custom_elevation$position_x-min(custom_elevation$position_x), c(0, floor(max(custom_elevation$position_x-min(custom_elevation$position_x)))+1, 100), "position x - m",
custom_elevation$position_y-min(custom_elevation$position_y), c(0, floor(max(custom_elevation$position_y-min(custom_elevation$position_y)))+1, 100), "position y - m",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_2var(
raw, "D) Raw - z",
raw$time-min(raw$time), c(0, floor(max(raw$time-min(raw$time)))+1, 10), "time - s",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom, "E) Custom - z",
custom$time-min(custom$time), c(0, floor(max(custom$time-min(custom$time)))+1, 10), "time - s",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom_elevation, "F) Custom elevation - z",
custom_elevation$time-min(custom_elevation$time), c(0, floor(max(custom_elevation$time-min(custom_elevation$time)))+1, 10), "time - s",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
nrow = 2, ncol = 3), width = 10*3, height = 5*2)
ggsave("output/position z.png", grid.arrange(
plot_3var(
raw, "A) Raw - position x y and z",
raw$position_x-min(raw$position_x), c(0, floor(max(raw$position_x-min(raw$position_x)))+1, 100), "position x - m",
raw$position_y-min(raw$position_y), c(0, floor(max(raw$position_y-min(raw$position_y)))+1, 100), "position y - m",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom, "B) Custom - position x y and z",
custom$position_x-min(custom$position_x), c(0, floor(max(custom$position_x-min(custom$position_x)))+1, 100), "position x - m",
custom$position_y-min(custom$position_y), c(0, floor(max(custom$position_y-min(custom$position_y)))+1, 100), "position y - m",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom_elevation, "C) Custom elevation - position x y and z",
custom_elevation$position_x-min(custom_elevation$position_x), c(0, floor(max(custom_elevation$position_x-min(custom_elevation$position_x)))+1, 100), "position x - m",
custom_elevation$position_y-min(custom_elevation$position_y), c(0, floor(max(custom_elevation$position_y-min(custom_elevation$position_y)))+1, 100), "position y - m",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_2var(
raw, "D) Raw - z",
raw$time-min(raw$time), c(0, floor(max(raw$time-min(raw$time)))+1, 10), "time - s",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom, "E) Custom - z",
custom$time-min(custom$time), c(0, floor(max(custom$time-min(custom$time)))+1, 10), "time - s",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom_elevation, "F) Custom elevation - z",
custom_elevation$time-min(custom_elevation$time), c(0, floor(max(custom_elevation$time-min(custom_elevation$time)))+1, 10), "time - s",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
nrow = 2, ncol = 3), width = 10*3, height = 5*2)
library(dplyr)
library(moments)
library(reticulate)
library(ggplot2)
library(grid)
library(gridExtra)
ggsave("output/position z.png", grid.arrange(
plot_3var(
raw, "A) Raw - position x y and z",
raw$position_x-min(raw$position_x), c(0, floor(max(raw$position_x-min(raw$position_x)))+1, 100), "position x - m",
raw$position_y-min(raw$position_y), c(0, floor(max(raw$position_y-min(raw$position_y)))+1, 100), "position y - m",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom, "B) Custom - position x y and z",
custom$position_x-min(custom$position_x), c(0, floor(max(custom$position_x-min(custom$position_x)))+1, 100), "position x - m",
custom$position_y-min(custom$position_y), c(0, floor(max(custom$position_y-min(custom$position_y)))+1, 100), "position y - m",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom_elevation, "C) Custom elevation - position x y and z",
custom_elevation$position_x-min(custom_elevation$position_x), c(0, floor(max(custom_elevation$position_x-min(custom_elevation$position_x)))+1, 100), "position x - m",
custom_elevation$position_y-min(custom_elevation$position_y), c(0, floor(max(custom_elevation$position_y-min(custom_elevation$position_y)))+1, 100), "position y - m",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_2var(
raw, "D) Raw - z",
raw$time-min(raw$time), c(0, floor(max(raw$time-min(raw$time)))+1, 10), "time - s",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom, "E) Custom - z",
custom$time-min(custom$time), c(0, floor(max(custom$time-min(custom$time)))+1, 10), "time - s",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
plot_2var(
custom_elevation, "F) Custom elevation - z",
custom_elevation$time-min(custom_elevation$time), c(0, floor(max(custom_elevation$time-min(custom_elevation$time)))+1, 10), "time - s",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_line(color="#6B9EE1"),
nrow = 2, ncol = 3), width = 10*3, height = 5*2)
ggsave("output/position z.png", grid.arrange(
plot_3var(
raw, "A) Raw - position x y and z",
raw$position_x-min(raw$position_x), c(0, floor(max(raw$position_x-min(raw$position_x)))+1, 100), "position x - m",
raw$position_y-min(raw$position_y), c(0, floor(max(raw$position_y-min(raw$position_y)))+1, 100), "position y - m",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom, "B) Custom - position x y and z",
custom$position_x-min(custom$position_x), c(0, floor(max(custom$position_x-min(custom$position_x)))+1, 100), "position x - m",
custom$position_y-min(custom$position_y), c(0, floor(max(custom$position_y-min(custom$position_y)))+1, 100), "position y - m",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_3var(
custom_elevation, "C) Custom elevation - position x y and z",
custom_elevation$position_x-min(custom_elevation$position_x), c(0, floor(max(custom_elevation$position_x-min(custom_elevation$position_x)))+1, 100), "position x - m",
custom_elevation$position_y-min(custom_elevation$position_y), c(0, floor(max(custom_elevation$position_y-min(custom_elevation$position_y)))+1, 100), "position y - m",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(alpha = 1),
plot_2var(
raw, "D) Raw - z",
raw$time-min(raw$time), c(0, floor(max(raw$time-min(raw$time)))+1, 10), "time - s",
raw$position_z-min(raw$position_z), c(0, floor(max(raw$position_z-min(raw$position_z)))+1, 1), "position z - m"
) +
geom_point(color="#6B9EE1"),
plot_2var(
custom, "E) Custom - z",
custom$time-min(custom$time), c(0, floor(max(custom$time-min(custom$time)))+1, 10), "time - s",
custom$position_z-min(custom$position_z), c(0, floor(max(custom$position_z-min(custom$position_z)))+1, 1), "position z - m"
) +
geom_point(color="#6B9EE1"),
plot_2var(
custom_elevation, "F) Custom elevation - z",
custom_elevation$time-min(custom_elevation$time), c(0, floor(max(custom_elevation$time-min(custom_elevation$time)))+1, 10), "time - s",
custom_elevation$position_z-min(custom_elevation$position_z), c(0, floor(max(custom_elevation$position_z-min(custom_elevation$position_z)))+1, 1), "position z - m"
) +
geom_point(color="#6B9EE1"),
nrow = 2, ncol = 3), width = 10*3, height = 5*2)
